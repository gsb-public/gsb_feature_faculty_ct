<?php
/**
 * @file
 * Code for the gsb_feature_faculty_ct feature.
 */

include_once 'gsb_feature_faculty_ct.features.inc';

/**
 * Implements hook_form_FORM_ID_alter() for faculty node edit form.
 */
function gsb_feature_faculty_ct_form_faculty_node_form_alter(&$form, &$form_state) {
  $form['#process'][] = 'gsb_feature_faculty_ct_faculty_node_form_process';

  $language = $form['language']['#value'];
  $form['field_leave_date']['#states'] = array(
    'required' => array(
      ':input[name="field_leave_status[' . $language . ']"]' => array('value' => '1'),
    ),
    'visible' => array(
      ':input[name="field_leave_status[' . $language . ']"]' => array('value' => '1'),
    ),    
  );

  $form['field_leave_statement']['#states'] = array(
    'required' => array(
      ':input[name="field_leave_status[' . $language . ']"]' => array('value' => '1'),
    ),
    'visible' => array(
      ':input[name="field_leave_status[' . $language . ']"]' => array('value' => '1'),
    ),    
  );

  $form['field_link_blog']['#states'] = array(
    'required' => array(
      ':input[name="field_has_blog[' . $language . ']"]' => array('value' => '1'),
    ),
  );

  $form['field_twitter_handle']['#states'] = array(
    'required' => array(
      ':input[name="field_has_twitter_handle[' . $language . ']"]' => array('value' => '1'),
    ),
  );

  $form['#attached']['js'] = array(
    array(
      'type' => 'file',
      'data' => drupal_get_path('module', 'gsb_feature_faculty_ct') . '/js/gsb_feature_faculty_ct.js',
    ),
  );

  // Perform additional validation.
  $form['#validate'][] = 'gsb_feature_faculty_ct_form_validate';
}

/**
 * Validate callback
 *  - Conditionally validate field.
 */
function gsb_feature_faculty_ct_form_validate($form, &$form_state) {
  $language = $form['language']['#value'];
  $values = $form_state['values'];

  if ($values['field_has_blog'][$language][0]['value'] == 1) {
    if (empty($values['field_link_blog']['und'][0]['title'])) {
      $field_label = $form['field_link_blog'][$language]['#title']. t(' Name');
      form_set_error('field_link_blog]['.$language.'][0][title', $field_label . ' field is required.');
    }
    if (empty($values['field_link_blog']['und'][0]['url'])) {
      $field_label = $form['field_link_blog'][$language]['#title'];
      form_set_error('field_link_blog]['.$language.'][0][url', $field_label . ' field is required.');
    }
  }
  else {
    $form_state['values']['field_link_blog']['und'][0]['title'] = '';
    $form_state['values']['field_link_blog']['und'][0]['url'] = '';
  }

  if ($values['field_has_twitter_handle'][$language][0]['value'] == 1) {
    if (empty($values['field_twitter_handle']['und'][0]['value'])) {
      $field_label = $form['field_twitter_handle'][$language]['#title'];
      form_set_error('field_twitter_handle]['.$language.'][0][value', $field_label . ' field is required.');
    }
    else {
      if (substr($values['field_twitter_handle']['und'][0]['value'], 0, 1) == '@') {
        $form_state['values']['field_twitter_handle']['und'][0]['value'] = substr($values['field_twitter_handle']['und'][0]['value'], 1);
      }
    }
  }
  else {
    $form_state['values']['field_twitter_handle']['und'][0]['value'] = '';
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function gsb_feature_faculty_ct_field_widget_link_field_form_alter(&$element, &$form_state, $context) {
  if ($context['instance']['field_name'] == 'field_link_other_social') {
    $element['#after_build'][] = 'gsb_feature_faculty_ct_link_other_social_after_build';
  }
}


/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *   - Add additional process for Photo field in Faculty CT to populate Alt text field.
 */
function gsb_feature_faculty_ct_field_widget_image_image_form_alter(&$element, &$form_state, $context) {
  if ($context['instance']['bundle'] == 'faculty' && $context['instance']['field_name'] == 'field_image_single_public') {
    foreach (element_children($element) as $delta) {
      $element[$delta]['#process'][] = 'gsb_feature_faculty_ct_photo_field_process';
    }
  }
}

/**
 * Process callback to populate alt field for Image in Faculty CT.
 */
function gsb_feature_faculty_ct_photo_field_process($element, &$form_state, $form) {
  $language = $form['language']['#value'];
  $input = &$form_state['input'];

  // Fields to be concatenated in Alternative text field in Image.
  $name_fields = array('field_first_name', 'field_middle_name', 'field_last_name');
  $name_parts = array();
  foreach ($name_fields as $field_name) {
    if (!empty($input[$field_name][$language][0]['value'])) {
      $name_parts[] = $input[$field_name][$language][0]['value'];
    }
  }
  $author_name = implode(' ', $name_parts);
  $element['alt']['#default_value'] = !empty($element['alt']['#default_value']) ? $element['alt']['#default_value'] : $author_name;
  // Hide Alternate text field.
  $element['alt']['#access'] = FALSE;
  return $element;
}

/**
 * #after_build callback for changing the link widget text for social links.
 */
function gsb_feature_faculty_ct_link_other_social_after_build($element, &$form_state) {
  $element['title']['#title'] = t('Site Name');
  return $element;
}

/**
 * #process callback: Hide elements on the faculty form.
 */
function gsb_feature_faculty_ct_faculty_node_form_process($form) {
  // Hide the 'Administration' group.
  if (!user_access('create faculty content')) {
    $groups = array(
      'group_administration',
    );
    gsb_feature_base_fields_hide_fieldgroups($form, $groups);
  }
  return $form;
}

/**
 * Implements hook_node_view_alter
 */
function gsb_feature_faculty_ct_node_view_alter(&$build, $entity_type) {
  // Only show the leave statement if the node is being viewed 
  // between the leave dates.
  $wrapper = entity_metadata_wrapper($entity_type, $build["#$entity_type"]);
  if ($wrapper->getBundle() != 'faculty') {
    return;
  }
  $build['field_leave_statement']['#access'] = FALSE;
  $leave_date = $wrapper->field_leave_date->value();
  if ($leave_date != null && $wrapper->field_leave_status->value()) {
    $today = new DateTime();
    $start_date = new DateTime($leave_date['value']);
    $end_date = new DateTime($leave_date['value2']);
    if ($start_date <= $today &&  $today <= $end_date) {
      $build['field_leave_statement']['#access'] = TRUE;
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function gsb_feature_faculty_ct_node_presave($node) {
  if ($node->type != 'faculty') {
    return;
  }

  $faculty_role = user_role_load_by_name('Faculty');

  $wrapper = entity_metadata_wrapper('node', $node);
  $faculty_name = $wrapper->field_sunetid->value();
  // If no user exists with this name, attempt to create a new faculty user.
  if (!($faculty_user = user_load_by_name($faculty_name))) {
    $edit = array(
      'name' => $faculty_name,
      'mail' => $faculty_name . '@stanford.edu',
      'pass' => user_password(),
      'status' => 1,
      'init' => 'gsb_feature_faculty_ct',
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
        $faculty_role->rid => $faculty_role->name,
      ),
    );
    $faculty_user = user_save(drupal_anonymous_user(), $edit);
  }

  // Assign this user as the author of the faculty profile.
  $node->uid = $faculty_user->uid;

  if (!in_array('Faculty', $faculty_user->roles)) {
    $roles = $faculty_user->roles;
    $roles[$faculty_role->rid] = $faculty_role->name;
    user_save($faculty_user, array('roles' => $roles));
  }

  if ($wrapper->field_rank->value() != 'Instructor') {
    _gsb_feature_faculty_ct_update_academic_areas($wrapper);
  }
  if (isset($node->workbench_moderation_state_new)) {
    _gsb_feature_faculty_ct_update_faculty_by_sunet($wrapper, $node->workbench_moderation_state_new);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for workbench_moderation_moderate_form().
 */
function gsb_feature_faculty_ct_form_workbench_moderation_moderate_form_alter(&$form, &$form_state, $form_id) {
  // Add our submit function in front of workbench, since it will redirect and
  // prevent other submit functions from running.
  array_unshift($form['#submit'], 'gsb_feature_faculty_ct_workbench_moderation_moderate_form_submit');
}

/**
 * Form submission handler for workbench_moderation_moderate_form().
 */
function gsb_feature_faculty_ct_workbench_moderation_moderate_form_submit(&$form, &$form_state) {
  $node = node_load($form_state['values']['node']->nid, $form_state['values']['node']->vid);
  if ($node->type != 'faculty') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if ($wrapper->field_rank->value() != 'Instructor') {
    _gsb_feature_faculty_ct_update_academic_areas($wrapper);
  }
  _gsb_feature_faculty_ct_update_faculty_by_sunet($wrapper, $form_state['values']['state']);
}

/**
 * Updates the academic area via an external service.
 *
 * @param \EntityDrupalWrapper $wrapper
 *   The faculty node.
 */
function _gsb_feature_faculty_ct_update_academic_areas($wrapper) {
  if (!$service_url = variable_get('gsb_feature_faculty_ct_service_url', '')) {
    watchdog('gsb_feature_faculty_ct', 'No external service URL is set.');
    return;
  }

  $query = array();
  // Pass the SUNet ID.
  $query['uid'] = $wrapper->field_sunetid->value();

  // Gather the secondary academic areas.
  $secondary_areas = array();
  foreach ($wrapper->field_academic_area_unlimited as $secondary_area) {
    $secondary_areas[] = _gsb_feature_faculty_ct_adjust_academic_area_names($secondary_area->label());
  }
  $query['secondaryAcadArea'] = implode('|', $secondary_areas);

  $centers = array();
  foreach ($wrapper->field_centers_research_programs as $center) {
    $centers[] = $center->label();
  }

  // Check for the primary academic area.
  if ($primary_area = $wrapper->field_academic_area_single->label()) {
    $query['primaryAcadArea'] = _gsb_feature_faculty_ct_adjust_academic_area_names($primary_area);
  }
  else {
    // If any Centers have been selected, then send as the Primary
    if (!empty($centers)) {
      $query['primaryAcadArea'] = array_shift($centers);
    }
  }
  $query['secondaryAcadArea'] = implode('|', array_merge($secondary_areas,$centers));

  if (empty($query['secondaryAcadArea']) || $query['secondaryAcadArea'] == '') {
    // Provide an invalid secondary academic area to unset the value.
    $query['secondaryAcadArea'] == 'none';
  }
  if (empty($query['primaryAcadArea']) || $query['primaryAcadArea'] == '') {
    // Provide an invalid primary academic area to unset the value.
    $query['primaryAcadArea'] = 'none';
  }

  $query['secondaryAcadArea'] = drupal_encode_path($query['secondaryAcadArea']);
  $query['primaryAcadArea'] = drupal_encode_path($query['primaryAcadArea']);

  // Build the URL.
  $url = $service_url . '/ManageAcademicAreas';
  $result = _gsb_feature_faculty_ct_curl($url, $query);

  // Parse the result status.
  if ($result->code !== 200 || $result->data[0] !== '-1') {
    watchdog('gsb_feature_faculty_ct', 'Faculty update failed with status @status for user: @user', array('@user' => $query['uid'], '@status' => $result->code), WATCHDOG_WARNING);
  }
}

/**
 * Adjusts the academic area to match the destination value.
 *
 * @param string $name
 *   The academic area name.
 *
 * @return string
 *   The academic area name expected by the external service.
 */
function _gsb_feature_faculty_ct_adjust_academic_area_names($name) {
  $map = array(
    'Operations, Information & Technology' => 'Operations, Information and Technology',
  );
  if (isset($map[$name])) {
    $name = $map[$name];
  }
  return $name;
}

/**

 * Updates the faculty to copernicus via an external web service.
 *
 * @param \EntityDrupalWrapper $wrapper
 *   The faculty node.
 * @param string $state
 *   The state of the node, e.g., 'draft', 'published'.
 */
function _gsb_feature_faculty_ct_update_faculty_by_sunet($wrapper, $state) {
  if (!$service_url = variable_get('gsb_feature_faculty_ct_service_url', '')) {
    watchdog('gsb_feature_faculty_ct', 'No external service URL is set.');
    return;
  }

  $query = array();
  // Pass the SUNet ID.
  $query['sunet'] = $wrapper->field_sunetid->value();

  $query['bioPublished'] = 0;
  if ($state == workbench_moderation_state_published()) {
    $query['bioPublished'] = 1;
  }

  // Show email =0 if the field is empty 1 if it is not empty
  $email = $wrapper->field_email->value();
  $query['showEmail'] = 0;
  if (!empty($email)) {
    $query['showEmail'] = 1;
  }

  // Show phone =0 if the field is empty 1 if it is not empty
  $phone = $wrapper->field_phone->value();
  $query['showPhone'] = 0;
  if (!empty($phone)) {
    $query['showPhone'] = 1;
  }
  $query['rank'] = $wrapper->field_rank->value();
  $query['rank'] = drupal_encode_path($query['rank']);

  // Build the URL.
  $url = $service_url . '/UpdateFacultyBySunet';
  $result = _gsb_feature_faculty_ct_curl($url, $query);

  // Parse the result status.
  if ($result->code !== 200 || $result->data[0] !== '-1') {
    watchdog('gsb_feature_faculty_ct', 'Faculty update failed with status @status for sunet: @sunet', array('@sunet' => $query['sunet'], '@status' => $result->code), WATCHDOG_WARNING);
  }
}

/**
 * Implements hook_field_attach_update().
 *
 * Alt and Title fields are not synced back to File Entity metadata.
 * @see https://drupal.org/node/2070183
 * @see https://drupal.org/node/2029985
 */
function gsb_feature_faculty_ct_field_attach_update($entity_type, $entity) {
  if ($entity_type == 'file') {
    return;
  }

  list(, , $bundle) = entity_extract_ids($entity_type, $entity);

  // Examine every image field instance attached to this entity's bundle.
  $instances = array_intersect_key(field_info_instances($entity_type, $bundle), _file_entity_get_fields_by_type('image'));
  foreach ($instances as $field_name => $instance) {
    if (!empty($entity->{$field_name})) {
      foreach ($entity->{$field_name} as $langcode => $items) {
        foreach ($items as $delta => $item) {
          $updated = FALSE;
          // Save alt and title text from the image field to the file entity.
          $file = file_load($item['fid']);
          foreach (array('alt', 'title') as $key) {
            $field_key = 'field_file_image_' . $key . '_text';
            if ($file->{$field_key}[LANGUAGE_NONE][0]['value'] != $item[$key]) {
              $file->{$field_key}[LANGUAGE_NONE][0]['value'] = $item[$key];
              $updated = TRUE;
            }
          }
          if ($updated) {
            field_attach_update('file', $file);
          }
        }
      }
    }
  }
}

/**
 * Executes curl get request and returnS $results object with:
 *   $results->errno
 *   $results->errmsg
 *   $results->code
 *   $results->data
 */
function _gsb_feature_faculty_ct_curl($url, $fields) {

  //url-ify the data for the POST
  $fields_string = '';
  foreach($fields as $key => $value) {
    $fields_string .= $key.'='.$value.'&';
  }
  $fields_string = rtrim($fields_string, '&');

  //open connection
  $session = curl_init();

  $url .= '?' . $fields_string;

  curl_setopt_array($session, array(
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_URL => $url,
    CURLOPT_HEADER => 0,
    CURLOPT_SSL_VERIFYHOST => 0,
    CURLOPT_SSL_VERIFYPEER => 0
  ));

  $body = curl_exec($session);

  $xml = simplexml_load_string($body);
  $data = json_decode(json_encode((array)$xml), TRUE);

  $errno = curl_errno($session);
  $errmsg = curl_error($session);

  $code = curl_getinfo($session, CURLINFO_HTTP_CODE);

  $results = new stdClass();
  $results->errno = $errno;
  $results->errmsg = $errmsg;
  $results->code = $code;
  $results->data = $data;

  //close connection
  curl_close($session);

  return $results;
}


/**
 * Implements hook_field_formatter_info().
 */
function gsb_feature_faculty_ct_field_formatter_info() {
  return array(
    // the key must be unique, so it's best to prefix with your module's name.
    'gsb_feature_faculty_ct_title_text' => array(
      // the label is is what is displayed in the select box in the UI.
      'label' => t('Title, as text'),
      // field types is the important bit!! List the field types your formatter is for.
      'field types' => array('link_field'),
      // You can usually leave 'multiple values' as follows:
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view(). This code just passes straight
 * through to a theme function, gsb_feature_faculty_ct_formatter_FORMATTER
 * (e.g. gsb_feature_faculty_ct_formatter_gsb_feature_faculty_ct_title_text).
 */
function gsb_feature_faculty_ct_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => theme('gsb_feature_faculty_ct_formatter_'. $display['type'], array('element' => $item, 'field' => $instance)),
    );
  }
  return $elements;
}

/**
 * Implements hook_theme().
 */
function gsb_feature_faculty_ct_theme() {
  return array(
    // The theme function that our formatter uses:
    'gsb_feature_faculty_ct_formatter_gsb_feature_faculty_ct_title_text' => array(
      // Don't forget that all Drupal 7 theme functions have only one argument,
      // so you declare what variables get passed within that argument instead.
      // See http://drupal.org/node/224333#theme_changes
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Theme function for 'gsb_feature_faculty_ct_title_text' link field formatter.
 */
function theme_gsb_feature_faculty_ct_formatter_gsb_feature_faculty_ct_title_text($element) {
  // This code is specific to the Link field. It is based on theme_link_formatter_plain().
  return $element['element']['title'];
}
